import { NextPage } from "next";
import Head from "next/head";
import Script from "next/script";
import Image from "next/image";
import styles from "../styles/Home.module.scss";
import TagInput from "../components/TagInput/TagInput";
import Header from "../components/Header/Header";
import { useEffect, useState } from "react";
import ResultsContainer from "../components/ResultsContainer/ResultsContainer";
import RecipePopup from "../components/RecipePopup";
import Loading from "../components/Loading/Loading";

import API from "../components/API";
const Home: NextPage = () => {
  // null: for search not started yet.
  // [data]: for something found
  // []: for nothing found
  // endless search will be somewhere else
  const [recipes, setRecipes] = useState<any[] | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [modalOpened, setModalOpened] = useState(false);
  const [currentRecipePopupId, setCurrentRecipePopupId] = useState<
    null | string
  >(null);

  const fetchRecipes = async (tagsToSearch: string[], pages = 1) => {
    setLoading(true);
    setTags(tagsToSearch);
    if (tagsToSearch && tagsToSearch.length) {
      try {
        const newRecipes = await API.getRecipes(tagsToSearch, pages);
        if (pages > 1) {
          setRecipes([...(recipes ?? []), newRecipes]);
          return;
        }
        setRecipes(newRecipes);
      } catch (error) {
        console.debug(error);
      }
    }
    setLoading(false);
  };
  useEffect(() => {
    if (currentRecipePopupId !== null) {
      setModalOpened(true);
    } else {
      setModalOpened(false);
    }
  }, [currentRecipePopupId]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Fill the Fridge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <TagInput getRecipes={fetchRecipes} />
      <div className="container mt-4 container-infinite d-flex justify-content-center">
        {loading ? (
          <Loading />
        ) : (
          <ResultsContainer
            recipes={recipes}
            openRecipe={(id) => {
              setCurrentRecipePopupId(id);
            }}
            // updateRecipes={fetchRecipes}
          />
        )}
      </div>
      <div className="d-flex justify-content-center mt-4" id="reloading"></div>
      <div className="container mt-4 container-infinite">
        <div
          className="row row-cols-1 row-cols-sm-2 row-cols-md-3"
          id="search-results-container"
        ></div>
        <div className="d-flex justify-content-center" id="loading"></div>
      </div>
      <div className="container container-popup">
        <RecipePopup
          recipeId={currentRecipePopupId}
          showModal={modalOpened}
          handleCloseModal={() => setModalOpened(false)}
          ingredients={tags}
        />
      </div>
      <Script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYsL3NtRxHucdRBUKgnmP5m0QQcTnjM3s&libraries=places" />
    </div>
  );
};

export default Home;
